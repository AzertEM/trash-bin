import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'dart:typed_data';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:async';
import 'dart:io';

class ImageDatabaseHelper {
  // Creates one single instance of the ImageDatabaseHelper class
  static final ImageDatabaseHelper instance = ImageDatabaseHelper._();

  // Used to store the actual SQLite database instance
  // This is to ensure that only one instance of the database is ever created
  static Database? _database;

  // Private constructor
  // This is to ensure that only one instance of the ImageDatabaseHelper class
  // is created throughout the entire application (singleton)
  ImageDatabaseHelper._();

  // Getter for the database instance
  // If the database instance is null, it will be initialized
  // Otherwise, it will return the existing database instance
  // This is to ensure that only one instance of the database is ever created
  Future<Database> get database async {
    if (_database != null) return _database!;

    _database = await _initDatabase();
    return _database!;
  }

  // Responsible for calculating the path, opening the SQLite database,
  // and returning a Future<Database> that represents the opened database
  Future<Database> _initDatabase() async {
    sqfliteFfiInit();
    databaseFactory = databaseFactoryFfi;
    Directory doc = await getApplicationDocumentsDirectory();
    final String path = join(doc.path, 'image_database.db');
    print("Database created at $path");
    return await openDatabase(path, version: 1, onCreate: _createDB);
  }

  // Creates the database tables
  // Defines the structure of the images table in the database
  Future<void> _createDB(Database db, int version) async {
    await db.execute('''
      CREATE TABLE images (
        id INTEGER PRIMARY KEY,
        image BLOB
      )
    ''');
  }

  // Inserts an image into the database
  // Returns the ID of the inserted image, indicating success
  // This ID is auto-generated by SQLite
  // This ID can be used to retrieve the image from the database
  Future<int> insertImage(Uint8List imageBytes) async {
    final db = await database;
    return await db.insert('images', {'image': imageBytes});
  }

  // Retrieves all images from the database
  // Returns a list of maps
  // Each map contains the ID and image of the image
  // The ID can be used to delete the image from the database
  // The image can be used to display the image
  // The image is stored as a Uint8List
  // This Uint8List can be converted to an Image using the Image.memory constructor
  // This Image can then be displayed using the Image widget
  // See lib/main.dart for an example
  Future<List<Map<String, dynamic>>> getImages() async {
    final db = await database;
    return await db.query('images');
  }
}